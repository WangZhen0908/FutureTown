package com.vvage.futuretown.fragment;

import java.util.HashMap;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.vvage.futuretown.BaseFragment;
import com.vvage.futuretown.HomeActivity;
import com.vvage.futuretown.R;
import com.vvage.futuretown.activity.LoginListener;
import com.vvage.futuretown.activity.UserInfoActivity;
import com.vvage.futuretown.cmd.Apicmd;
import com.vvage.futuretown.model.LoginParse;
import com.vvage.futuretown.model.RegisterParse;
import com.vvage.futuretown.model.SendVCodeParse;

public class UserFragment extends BaseFragment {
	private Button loginBtn, findPassBtn, registerBtn;
	private EditText userNameEdit, passwordEdit;
	private ImageView leftImgBtn, rightImgBtn, quitImgBtn;// 标题栏，左侧首页按钮、右侧注销
	private TextView centerText;
	private CheckBox freeLoginCheckBox;
	private SharedPreferences sharePre;
	private Editor edit;
	private LayoutInflater inflater;
	private LinearLayout userLinear;
	private View loginView;// 默认是登陆界面
	private Button sendValidationCodeBtn;// 发送验证码
	private EditText phoneNumEdit, validationEdit;// 手机号EditText
	private Button registerConfirmBtn;
	private Button myOrderBtn, myEnquiryBtn, myFavorBtn, raffleBtn,
			publishMsgBtn, editPersonalInfoBtn, sendMsgDoneBtn,
			goodsDeliverAddressBtn, regiterStoreBtn;

	private Button getVCodeSmsBtn, updatePassBtn;// 更新密码
	private EditText phoneSMSEdit, verificationCodeEdit, passwordNewEdit1, passwordNewEdit2;

	protected final static int MSG_REGISTER = 0x111; // 没有网络连接
	protected final static int MSG_GET_VCODE = 0x112; // 没有网络连接
	
	public static boolean isLogin;
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		HashMap<String, LoginListener> l = new HashMap<String, LoginListener>();
		l.put("user", mLoginListener);
		HomeActivity.setLoginListener(l);

	}

	private LoginListener mLoginListener = new LoginListener() {

		@Override
		public void Login(boolean isLogin) {
			// TODO Auto-generated method stub
			sharePre = getActivity().getSharedPreferences("loginStatus",
					Context.MODE_PRIVATE);
			edit = sharePre.edit();
			userNameEdit.setText(sharePre.getString("userName", ""));
			if(!sharePre.getBoolean("loginStatus", false)){
				freeLoginCheckBox.setChecked(false);
			}else{
				passwordEdit.setText(sharePre.getString("password", ""));
				freeLoginCheckBox.setChecked(true);
				AsyncTask<Object, Object, LoginParse> asyncTask = new AsyncTask<Object, Object, LoginParse>() {

					@Override
					protected LoginParse doInBackground(
							Object... params) {
						// TODO Auto-generated method stub
						return Apicmd.getInstance().Login(
								getActivity(), sharePre.getString("userName", ""), sharePre.getString("password", ""));

					}

					protected void onPostExecute(LoginParse result) {
						// TODO Auto-generated method stub
						if (result != null && result.status.equals("0")) {
							// 注意：此处需要记录获取用户标记，以区别是个人用户还是商家，此处只演示个人用户中心显示
							userLinear.removeAllViews();
							View personView = inflater.inflate(
									R.layout.person_center, null);
							prepareHeaderView(personView);
							preparePersonCenterView(personView);
							preparePersonCenterData();
							userLinear.addView(personView);
						}
					}

				};
				asyncTask.execute(new Object[] {});
			}
		}
	};
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		this.inflater = inflater;
		loginView = inflater.inflate(R.layout.fragment_login, null);
		userLinear = (LinearLayout) loginView.findViewById(R.id.userLinear);
		prepareHeaderView(loginView);
		prepareLoginView(loginView);
		prepareLoginData();
		return loginView;
	}

	private void preparePersonCenterData() {
		// TODO Auto-generated method stub
		sharePre = getActivity().getSharedPreferences("loginStatus",
				Context.MODE_PRIVATE);
		edit = sharePre.edit();
		// 用户中心界面，此处初始化数据
	}

	private void prepareLoginData() {
		// TODO Auto-generated method stub
		sharePre = getActivity().getSharedPreferences("loginStatus",
				Context.MODE_PRIVATE);
		edit = sharePre.edit();
		userNameEdit.setText(sharePre.getString("userName", ""));
		if(sharePre.getBoolean("loginStatus", false)){
			freeLoginCheckBox.setChecked(false);
		}else{
			passwordEdit.setText(sharePre.getString("password", ""));
			freeLoginCheckBox.setChecked(true);
			AsyncTask<Object, Object, LoginParse> asyncTask = new AsyncTask<Object, Object, LoginParse>() {

				@Override
				protected LoginParse doInBackground(
						Object... params) {
					// TODO Auto-generated method stub
					return Apicmd.getInstance().Login(
							getActivity(), sharePre.getString("userName", ""), sharePre.getString("password", ""));

				}

				protected void onPostExecute(LoginParse result) {
					// TODO Auto-generated method stub
					if (result != null && result.status.equals("0")) {
						//登陆成功，则设置登陆标记为true
						isLogin=true;
						// 注意：此处需要记录获取用户标记，以区别是个人用户还是商家，此处只演示个人用户中心显示
						userLinear.removeAllViews();
						View personView = inflater.inflate(
								R.layout.person_center, null);
						prepareHeaderView(personView);
						preparePersonCenterView(personView);
						preparePersonCenterData();
						userLinear.addView(personView);
					}
				}

			};
			asyncTask.execute(new Object[] {});
		}
	}

	private void prepareHeaderView(View view) {
		// TODO Auto-generated method stub
		leftImgBtn = (ImageView) view.findViewById(R.id.leftImgBtn);
		rightImgBtn = (ImageView) view.findViewById(R.id.rightImgBtn);
		quitImgBtn = (ImageView) view.findViewById(R.id.quitImgBtn);
		centerText = (TextView) view.findViewById(R.id.centerText);
		// leftImgBtn.setOnTouchListener(new MyOnTouchListener());
	}

	private void prepareLoginView(View view) {
		// TODO Auto-generated method stub
		freeLoginCheckBox = (CheckBox) view.findViewById(R.id.freeLoginRadio);
		leftImgBtn.setVisibility(View.GONE);
		rightImgBtn.setVisibility(View.GONE);
		centerText.setText("登陆");
		userNameEdit = (EditText) view.findViewById(R.id.userName);
		passwordEdit = (EditText) view.findViewById(R.id.password);
		loginBtn = (Button) view.findViewById(R.id.loginBtn);
		findPassBtn = (Button) view.findViewById(R.id.findPassBtn);
		registerBtn = (Button) view.findViewById(R.id.registerBtn);
		loginBtn.setOnTouchListener(new MyOnTouchListener());
		findPassBtn.setOnTouchListener(new MyOnTouchListener());
		registerBtn.setOnTouchListener(new MyOnTouchListener());
		
	}

	private void preparePersonCenterView(View view) {
		// TODO Auto-generated method stub
		leftImgBtn.setVisibility(View.GONE);
		rightImgBtn.setVisibility(View.GONE);
		quitImgBtn.setVisibility(View.VISIBLE);
		quitImgBtn.setImageResource(R.drawable.btn_quit);
		centerText.setText("个人中心");
		myOrderBtn = (Button) view.findViewById(R.id.myOrderBtn);
		myEnquiryBtn = (Button) view.findViewById(R.id.myEnquiryBtn);
		myFavorBtn = (Button) view.findViewById(R.id.myFavorBtn);
		raffleBtn = (Button) view.findViewById(R.id.raffleBtn);
		publishMsgBtn = (Button) view.findViewById(R.id.publishMsgBtn);
		editPersonalInfoBtn = (Button) view
				.findViewById(R.id.editPersonalInfoBtn);
		sendMsgDoneBtn = (Button) view.findViewById(R.id.sendMsgDoneBtn);
		goodsDeliverAddressBtn = (Button) view
				.findViewById(R.id.goodsDeliverAddressBtn);
		regiterStoreBtn = (Button) view.findViewById(R.id.regiterStoreBtn);

		quitImgBtn.setOnTouchListener(new MyOnTouchListener());
		myOrderBtn.setOnTouchListener(new MyOnTouchListener());
		myEnquiryBtn.setOnTouchListener(new MyOnTouchListener());
		myFavorBtn.setOnTouchListener(new MyOnTouchListener());
		raffleBtn.setOnTouchListener(new MyOnTouchListener());
		publishMsgBtn.setOnTouchListener(new MyOnTouchListener());
		editPersonalInfoBtn.setOnTouchListener(new MyOnTouchListener());
		sendMsgDoneBtn.setOnTouchListener(new MyOnTouchListener());
		goodsDeliverAddressBtn.setOnTouchListener(new MyOnTouchListener());
		regiterStoreBtn.setOnTouchListener(new MyOnTouchListener());
	}

	private void prepareRegisterView(View view) {
		// TODO Auto-generated method stub
		leftImgBtn.setImageResource(R.drawable.btn_back);
		rightImgBtn.setVisibility(View.GONE);
		centerText.setText("注册");
		leftImgBtn.setOnTouchListener(new MyOnTouchListener());
		sendValidationCodeBtn = (Button) view
				.findViewById(R.id.sendValidationCodeBtn);
		registerConfirmBtn = (Button) view
				.findViewById(R.id.registerConfirmBtn);// 注册按钮
		phoneNumEdit = (EditText) view.findViewById(R.id.phoneNumEdit);// 电话
		passwordEdit = (EditText) view.findViewById(R.id.passwordEdit);// 密码
		validationEdit = (EditText) view.findViewById(R.id.validationEdit);// 验证码
		sendValidationCodeBtn.setOnTouchListener(new MyOnTouchListener());
		registerConfirmBtn.setOnTouchListener(new MyOnTouchListener());
	}

	private void prepareFindPassView(View view) {
		// TODO Auto-generated method stub
		leftImgBtn.setImageResource(R.drawable.btn_back);
		rightImgBtn.setVisibility(View.GONE);
		centerText.setText("找回密码");
		leftImgBtn.setOnTouchListener(new MyOnTouchListener());

		getVCodeSmsBtn = (Button) view.findViewById(R.id.getVCodeSmsBtn);
		updatePassBtn = (Button) view.findViewById(R.id.updatePassBtn);// 注册按钮
		verificationCodeEdit = (EditText) view
				.findViewById(R.id.verificationCodeEdit);// 电话
		phoneSMSEdit = (EditText) view.findViewById(R.id.phoneSMSEdit);// 电话
		passwordNewEdit1 = (EditText) view.findViewById(R.id.passwordNewEdit1);// 密码
		passwordNewEdit2 = (EditText) view.findViewById(R.id.passwordNewEdit2);// 验证码
		getVCodeSmsBtn.setOnTouchListener(new MyOnTouchListener());
		updatePassBtn.setOnTouchListener(new MyOnTouchListener());
	}

	private class MyOnTouchListener implements OnTouchListener {

		@Override
		public boolean onTouch(View v, MotionEvent event) {
			// TODO Auto-generated method stub
			switch (v.getId()) {
			case R.id.loginBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					loginBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					loginBtn.getBackground().setAlpha(255);
					if ("".equals(userNameEdit.getText().toString())) {
						Toast.makeText(getActivity(), "用户名不能为空",
								Toast.LENGTH_SHORT).show();
					} else if (true) {
						// 此处处理用户名和密码（用户名和密码不正确），需要接口

						final String phoneNum = userNameEdit.getText()
								.toString();
						final String password = passwordEdit.getText()
								.toString();

						AsyncTask<Object, Object, LoginParse> asyncTask = new AsyncTask<Object, Object, LoginParse>() {

							@Override
							protected LoginParse doInBackground(
									Object... params) {
								// TODO Auto-generated method stub
								return Apicmd.getInstance().Login(
										getActivity(), phoneNum, password);

							}

							protected void onPostExecute(LoginParse result) {
								// TODO Auto-generated method stub
								if (result != null && result.status.equals("0")) {
									// 如果用户名和密码都正确的话
									// 获取freeLoginRadio的状态
									if (freeLoginCheckBox.isChecked()) {
										// 如果选中七天免登陆
										edit.putBoolean("loginStatus", true);
										edit.putString("userName", userNameEdit
												.getText().toString());
										edit.putString("password", passwordEdit
												.getText().toString());
										edit.commit();
									} else {
										// 如果未选中七天免登陆
										edit.putBoolean("loginStatus", false);
										edit.putString("userName", userNameEdit
												.getText().toString());
										edit.putString("password", "");
										edit.commit();
									}
									Toast.makeText(getActivity(), result.msg, 0)
											.show();
									//登陆成功，则设置登陆标记为true
									isLogin=true;
									// 注意：此处需要记录获取用户标记，以区别是个人用户还是商家，此处只演示个人用户中心显示
									userLinear.removeAllViews();
									View personView = inflater.inflate(
											R.layout.person_center, null);
									prepareHeaderView(personView);
									preparePersonCenterView(personView);
									preparePersonCenterData();
									userLinear.addView(personView);
									InputMethodManager imm = (InputMethodManager) getActivity()
											.getSystemService(
													Context.INPUT_METHOD_SERVICE);
									imm.hideSoftInputFromWindow(userLinear
											.getApplicationWindowToken(),
											InputMethodManager.HIDE_NOT_ALWAYS);

								}
							}

						};
						asyncTask.execute(new Object[] {});

						FavorFragment f = new FavorFragment();

						// Supply index input as an argument.
						Bundle args = new Bundle();
						args.putInt("index", 2);
						f.setArguments(args);

					}
					break;
				default:
					break;
				}
				break;

			case R.id.findPassBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					findPassBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					findPassBtn.getBackground().setAlpha(255);
					Toast.makeText(getActivity(), "找回密码", 0).show();
					userLinear.removeAllViews();
					View findPasswordView = inflater.inflate(
							R.layout.find_password, null);
					prepareHeaderView(findPasswordView);
					prepareFindPassView(findPasswordView);
					userLinear.addView(findPasswordView);
					break;
				default:
					break;
				}
				break;

			case R.id.registerBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					registerBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					registerBtn.getBackground().setAlpha(255);
					Toast.makeText(getActivity(), "注册", 0).show();
					userLinear.removeAllViews();
					View registerView = inflater.inflate(
							R.layout.fragment_register, null);
					prepareHeaderView(registerView);
					prepareRegisterView(registerView);
					userLinear.addView(registerView);
					break;
				default:
					break;
				}
				break;
			case R.id.leftImgBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					leftImgBtn.setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					leftImgBtn.setAlpha(255);
					userLinear.removeAllViews();
					View loginView = inflater.inflate(R.layout.fragment_login,
							null);
					prepareHeaderView(loginView);
					prepareLoginView(loginView);
					prepareLoginData();
					userLinear.addView(loginView);
					break;
				default:
					break;
				}
				break;
			case R.id.sendValidationCodeBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					sendValidationCodeBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					sendValidationCodeBtn.getBackground().setAlpha(255);
					AsyncTask<Object, Object, SendVCodeParse> asyncTask = new AsyncTask<Object, Object, SendVCodeParse>() {

						@Override
						protected SendVCodeParse doInBackground(
								Object... params) {
							// TODO Auto-generated method stub
							return Apicmd.getInstance().sendVCode(
									getActivity(), "0",
									phoneNumEdit.getText().toString(), "0");
						}

						@Override
						protected void onPostExecute(SendVCodeParse result) {
							// TODO Auto-generated method stub
							super.onPostExecute(result);
							if (result != null && result.err_no.equals("0")) {
								// 如果手机未注册
								Toast.makeText(getActivity(), result.err_str, 0)
										.show();
								InputMethodManager imm = (InputMethodManager) getActivity()
										.getSystemService(
												Context.INPUT_METHOD_SERVICE);
								imm.hideSoftInputFromWindow(
										userLinear.getApplicationWindowToken(),
										InputMethodManager.HIDE_NOT_ALWAYS);

							} else {
								Toast.makeText(getActivity(), result.err_str, 0)
										.show();
							}
						}
					};
					asyncTask.execute(new Object[] {});
					break;
				default:
					break;
				}
				break;
			case R.id.getVCodeSmsBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					getVCodeSmsBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					getVCodeSmsBtn.getBackground().setAlpha(255);

					AsyncTask<Object, Object, SendVCodeParse> asyncTask = new AsyncTask<Object, Object, SendVCodeParse>() {

						@Override
						protected SendVCodeParse doInBackground(
								Object... params) {
							// TODO Auto-generated method stub
							return Apicmd.getInstance().sendVCode(
									getActivity(), "1",
									phoneSMSEdit.getText().toString(), "0");
						}

						@Override
						protected void onPostExecute(SendVCodeParse result) {
							// TODO Auto-generated method stub
							super.onPostExecute(result);
							if (result != null && result.err_no.equals("0")) {
								// 如果手机未注册
								Toast.makeText(getActivity(), result.err_str, 0)
										.show();
								InputMethodManager imm = (InputMethodManager) getActivity()
										.getSystemService(
												Context.INPUT_METHOD_SERVICE);
								imm.hideSoftInputFromWindow(
										userLinear.getApplicationWindowToken(),
										InputMethodManager.HIDE_NOT_ALWAYS);

							} else {
								Toast.makeText(getActivity(), result.err_str, 0)
										.show();
							}
						}
					};
					asyncTask.execute(new Object[] {});
					
					break;
				default:
					break;
				}
				break;

			case R.id.registerConfirmBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					registerConfirmBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					registerConfirmBtn.getBackground().setAlpha(255);

					AsyncTask<Object, Object, RegisterParse> asyncTask = new AsyncTask<Object, Object, RegisterParse>() {

						@Override
						protected RegisterParse doInBackground(Object... params) {
							// TODO Auto-generated method stub
							return Apicmd.getInstance().register(getActivity(),
									phoneNumEdit.getText().toString(),
									passwordEdit.getText().toString(),
									validationEdit.getText().toString());
						}

						@Override
						protected void onPostExecute(RegisterParse result) {
							// TODO Auto-generated method stub
							super.onPostExecute(result);
							if (result != null && result.status.equals("0")) {
								// 可以注册
								Toast.makeText(getActivity(), result.msg, 0)
										.show();

								// 注意：此处需要记录用户的标记，用来区分是商家还是个人以便下次点击用户中心时，来区分
								userLinear.removeAllViews();
								View personView = inflater.inflate(
										R.layout.person_center, null);
								prepareHeaderView(personView);
								preparePersonCenterView(personView);
								preparePersonCenterData();
								userLinear.addView(personView);

							} else {
								Toast.makeText(getActivity(), result.msg, 0)
										.show();
							}
							
						}
					};
					asyncTask.execute(new Object[] {});
					InputMethodManager imm = (InputMethodManager) getActivity()
							.getSystemService(
									Context.INPUT_METHOD_SERVICE);
					imm.hideSoftInputFromWindow(
							userLinear.getApplicationWindowToken(),
							InputMethodManager.HIDE_NOT_ALWAYS);

					break;
				default:
					break;
				}
				break;
			case R.id.updatePassBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					updatePassBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					updatePassBtn.getBackground().setAlpha(255);
					Toast.makeText(
							getActivity(),
							"更新密码成功\n" + verificationCodeEdit.getText() + "\t"
									+ passwordNewEdit1.getText() + "\t"
									+ passwordNewEdit2.getText(), 0).show();
					userLinear.removeAllViews();
					View personView = inflater.inflate(R.layout.person_center,
							null);
					prepareHeaderView(personView);
					preparePersonCenterView(personView);
					preparePersonCenterData();
					userLinear.addView(personView);
					break;
				default:
					break;
				}
				break;
			case R.id.regiterStoreBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					regiterStoreBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					regiterStoreBtn.getBackground().setAlpha(255);
					// 注意：此处需要记录用户的标记，用来区分是商家还是个人以便下次点击用户中心时，来区分
					// userLinear.removeAllViews();
					new AlertDialog.Builder(getActivity()).setTitle("提示")
							.setMessage("个人用户需要。。。")
							.setPositiveButton("确定", null).create().show();
					break;
				default:
					break;
				}
				break;
			case R.id.quitImgBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					quitImgBtn.setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:

					break;
				case MotionEvent.ACTION_UP:
					quitImgBtn.setAlpha(255);
					// 注意：此处是注销页面，跳转到用户登陆界面，清空用户登陆信息
					edit.putBoolean("loginStatus", false);
					edit.putString("userName", userNameEdit.getText()
							.toString());
					edit.putString("password", "");
					edit.commit();
					userLinear.removeAllViews();
					View loginView = inflater.inflate(R.layout.fragment_login,
							null);
					prepareHeaderView(loginView);
					prepareLoginView(loginView);
					prepareLoginData();
					userLinear.addView(loginView);
					break;
				default:
					break;
				}
				break;
			case R.id.editPersonalInfoBtn:
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					editPersonalInfoBtn.getBackground().setAlpha(100);
					break;
				case MotionEvent.ACTION_MOVE:
					
					break;
				case MotionEvent.ACTION_UP:
					editPersonalInfoBtn.getBackground().setAlpha(255);
					// 注意：此处是注销页面，跳转到用户登陆界面，清空用户登陆信息
					Intent intent=new Intent();
					intent.setClass(getActivity(), UserInfoActivity.class);
					startActivity(intent);
					break;
				default:
					break;
				}
				break;
			default:
				break;
			}
			return true;
		}
	}
}
