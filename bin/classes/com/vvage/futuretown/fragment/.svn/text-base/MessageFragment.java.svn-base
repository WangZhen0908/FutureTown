package com.vvage.futuretown.fragment;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.Toast;

import com.vvage.futuretown.BaseFragment;
import com.vvage.futuretown.R;
import com.vvage.futuretown.model.User;
import com.vvage.futuretown.util.MemoryStatus;

public class MessageFragment extends BaseFragment {
	private final int PHOTO_MERCHANT=0;
	private final int PHOTO_GOODS=1;
	
	/*
	 * 调用系统相机相关参数
	 */
	private final int IMAGE_CAPTURE = 0xF1;
	private final int IMAGE_LOCAL = 0xF2;
	private final int IMAGE_SCALE = 0xF3;
	private final String BITMAP_PROP_NAME = "data";
	
	private int imageFrom;
	
	private final int fPicWidth = 100;
	private Uri imageUrl;
	private Bitmap bitMap;
	
	private Button mShootShop;
	private Button mShootMerchandies;
	
	private Button mPhoto;
	private ImageView mIM1;
	private ImageView mIM2;
	private ImageView mIM3;
	private ImageView mIM4;
	
	private Bitmap mIM1Bitmap;
	private Bitmap mIM2Bitmap;
	private Bitmap mIM3Bitmap;
	private Bitmap mIM4Bitmap;
	
	private ImageView mIM1Delete;
	private ImageView mIM2Delete;
	private ImageView mIM3Delete;
	private ImageView mIM4Delete;
	
	/*
	 * 0 is all have bmp 
	 * 1 is first default etc.
	 */
	private List<Integer> mPhotoFillArray;
	private ImageSort mImageSort = new ImageSort();
	
	
	/*
	 * 拍商家需要保存的信息
	 */
	private EditText mMerchantName;
	private EditText mMerchantTip;
	
	private RadioGroup mMerchantCategory;
	private RadioButton mMerchantTypeEat;
	private RadioButton mMerchantTypeWear;
	private RadioButton mMerchantTypeLive;
	private RadioButton mMerchantTypeUse;
	private RadioButton mMerchantTypePlay;
	private RadioButton mMerchantTypeEtc;
	
	private RadioGroup mMerchantStoreType;
	private RadioButton mMerchantStoreTypeIndependent;
	private RadioButton mMerchantStoreTypeShoppingMall;
	private LinearLayout mMerchantStoreTypeShoppingMallSelected;
	
	private Spinner mProvince;
	private Spinner mCity;
	private Spinner mDistrict;
	
	private List<String> mProvinceArray;
	
	private EditText mMerchantAddress;
	
	private Spinner mMerchantInShoppingMall;
	private Spinner mMerchantInShoppingMallFloor;
	
	private EditText mMerchantPhone;
	private EditText mMerchantBusinesshours;
	private EditText mMerchantBusLine;
	private EditText mMerchantNetworkUrl;
	
	//拍商品布局使用的参数  个人没有
	private RelativeLayout mMerchantGoodsLayout;
	private RadioGroup mMerchantGoodsPurpose;
	private RadioButton mMerchantGoodsTypeShow;
	private RadioButton mMerchantGoodsTypeEnquiry;
	private RadioButton mMerchantGoodsTypeHomeDelivery;
	
	private EditText mMerchantGoodsName;
	private EditText mMerchantGoodsCurrentPrice;
	private EditText mMerchantGoodsOriginalPrice;
	
	//个人拍商品
	private RelativeLayout mPersonalContactLayout;
	private RadioGroup mPersonalGoodsContact;
	private RadioButton mPersonalGoodsQQ;
	private RadioButton mPersonalGoodsPhone;
	private RadioButton mPersonalGoodsMail;
	private RadioButton mPersonalGoodsMessage;
	
	private LinearLayout mPersonalAddress;
	private EditText mPersonalAddressGoods;
	private Button mPersonalAddressHave;
	
	private Button mButtonSave;
	
	
	//公共按钮
	private LinearLayout mMerchantLocationLayout;
	private Button mMerchantGPSMap;
	private Button mMerchantLBS;
	
	
	//拍商家和拍商品layout
	private LinearLayout mMerchantLayout;
	private LinearLayout mMerchantOrPersonalGoodsLayout;
	
	
	
	
	private List<String> list = new ArrayList<String>();
//	private TextView myTextView;
	private Spinner mySpinner;
	private ArrayAdapter<String> adapter;
//	private Animation myAnimation;
//	private RadioButton duli, shangchang;
//	private LinearLayout re;
//	private Button paigoods, paishangjia;
	
	private LinearLayout l1, l2;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment_message, null);
		init(view);
		return view;

	}

	private void init(View view) {
		// TODO Auto-generated method stub
		
		//构造控件  需要切换的
		mShootShop = (Button)view.findViewById(R.id.id_shoot_shop);
		mShootMerchandies = (Button)view.findViewById(R.id.id_shoot_merchandies);
		
		//获取拍商家和拍商品layout
		mMerchantLayout = (LinearLayout) view.findViewById(R.id.l1);
		mMerchantOrPersonalGoodsLayout = (LinearLayout) view.findViewById(R.id.l2);
		mMerchantGoodsLayout = (RelativeLayout)view.findViewById(R.id.id_merchant_goods);
		mPersonalContactLayout = (RelativeLayout)view.findViewById(R.id.id_personal_contact);
		mPersonalAddress = (LinearLayout)view.findViewById(R.id.id_personal_address);
		mPersonalAddressHave = (Button)view.findViewById(R.id.id_personal_address_have);
		mMerchantLocationLayout= (LinearLayout)view.findViewById(R.id.id_merchant_location_layout);
		
		if(User.mIdentify==1){
			switchMerchandAndPersonal(User.mIdentify);
		}
		
		mPhoto = (Button)view.findViewById(R.id.id_photo_button);
		mPhoto.setOnClickListener(mPhotoOnClickListener);
		mIM1 = (ImageView)view.findViewById(R.id.id_photo_image_1);
		mIM2 = (ImageView)view.findViewById(R.id.id_photo_image_2);
		mIM3 = (ImageView)view.findViewById(R.id.id_photo_image_3);
		mIM4 = (ImageView)view.findViewById(R.id.id_photo_image_4);
		mIM1Delete = (ImageView)view.findViewById(R.id.id_photo_image_delete_1);
		mIM2Delete = (ImageView)view.findViewById(R.id.id_photo_image_delete_2);
		mIM3Delete = (ImageView)view.findViewById(R.id.id_photo_image_delete_3);
		mIM4Delete = (ImageView)view.findViewById(R.id.id_photo_image_delete_4);
		
		mPhotoFillArray = new ArrayList<Integer>(4);
		for(int i =1; i<=4; ++i){
			mPhotoFillArray.add(Integer.valueOf(i));
		}
		HandleImageUpdate();
		
		mMerchantStoreType = (RadioGroup)view.findViewById(R.id.id_merchant_store_type);
		mMerchantStoreTypeIndependent = (RadioButton)view.findViewById(R.id.id_merchant_store_type_independent);
		mMerchantStoreTypeShoppingMall = (RadioButton)view.findViewById(R.id.id_merchant_store_type_shoppingmall);
		mMerchantStoreTypeShoppingMallSelected = (LinearLayout)view.findViewById(R.id.id_merchant_shoppngmall_select);
		
		mMerchantStoreType.setOnCheckedChangeListener(mMerchantStroeTypeOnclClickListener);
		
		mShootShop.setOnClickListener(mShootShopOnClickListener);
		mShootMerchandies.setOnClickListener(mShootMerchandiesOnClickListener);
		
		mButtonSave = (Button)view.findViewById(R.id.id_merchant_save);
		mButtonSave.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				
			}
		});
	}
	
	private void switchMerchandAndPersonal(int type){
		if(type==1){
			mShootShop.setBackgroundResource(R.drawable.button_shoot_shop);
			mShootMerchandies.setBackgroundResource(R.drawable.button_shoot_merchandies_press);
			mMerchantLayout.setVisibility(LinearLayout.GONE);
			mMerchantOrPersonalGoodsLayout.setVisibility(LinearLayout.VISIBLE);
			if(User.mIdentify==1){
				mMerchantGoodsLayout.setVisibility(RelativeLayout.GONE);
				mPersonalContactLayout.setVisibility(RelativeLayout.VISIBLE);
				mPersonalAddress.setVisibility(LinearLayout.VISIBLE);
				mPersonalAddressHave.setVisibility(Button.VISIBLE);
				mMerchantLocationLayout.setVisibility(LinearLayout.VISIBLE);
				
			}
		}else{
			mShootShop.setBackgroundResource(R.drawable.button_shoot_shop_press);
			mShootMerchandies.setBackgroundResource(R.drawable.button_shoot_merchandies);
			
			mMerchantLayout.setVisibility(LinearLayout.VISIBLE);
			mMerchantOrPersonalGoodsLayout.setVisibility(LinearLayout.GONE);
			
//			mMerchantGoodsLayout.setVisibility(RelativeLayout.GONE);
//			mPersonalContactLayout.setVisibility(RelativeLayout.VISIBLE);
//			mPersonalAddress.setVisibility(LinearLayout.VISIBLE);
//			mPersonalAddressHave.setVisibility(Button.VISIBLE);
//			mMerchantLocationLayout.setVisibility(LinearLayout.VISIBLE);
		}
	}
	
	private OnClickListener mShootShopOnClickListener = new OnClickListener() {
		
		@Override
		public void onClick(View arg0) {
			// TODO Auto-generated method stub
			if(User.mIdentify==1){
				Toast.makeText(getActivity(),"亲~您目前还不是商家，请先注册~",Toast.LENGTH_SHORT).show();
			}else{
				switchMerchandAndPersonal(PHOTO_MERCHANT);
			}
		}
	};
	
	private OnClickListener mShootMerchandiesOnClickListener = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			switchMerchandAndPersonal(PHOTO_GOODS);
		}
	};
	
	private RadioGroup.OnCheckedChangeListener mMerchantStroeTypeOnclClickListener = new RadioGroup.OnCheckedChangeListener() {
		
		@Override
		public void onCheckedChanged(RadioGroup group, int checkedId) {
			// TODO Auto-generated method stub
			if(checkedId == mMerchantStoreTypeIndependent.getId()){
				mMerchantStoreTypeShoppingMallSelected.setVisibility(LinearLayout.GONE);
			}else if(checkedId == mMerchantStoreTypeShoppingMall.getId()){
				mMerchantStoreTypeShoppingMallSelected.setVisibility(LinearLayout.VISIBLE);
			}
		}
	};
	
	private void setImageViewBitmap(Bitmap bmp){
		
	}
	
	
	/*
	 * 处理photo事件
	 */
	
	private OnClickListener mPhotoOnClickListener = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if(MemoryStatus.externalMemoryAvailable()){
				takePhoto();
			}else {
//				Toast.makeText(this, "没有SD卡，无法启动相机", duration)
			}
			
		}
	};
	
	private void HandleImageUpdate(){
		mIM1Delete.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mIM1!= null && mIM1Bitmap!=null && !mIM1Bitmap.isRecycled()){
					mIM1Bitmap.recycle();
					mIM1Bitmap = null;
					mIM1.setImageBitmap(mIM1Bitmap);
					mPhotoFillArray.add(Integer.valueOf(1));
					Collections.sort(mPhotoFillArray, mImageSort);
				}
			}
		});
		mIM2Delete.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mIM2Bitmap!=null && !mIM2Bitmap.isRecycled()){
					mIM2Bitmap.recycle();
					mIM2Bitmap = null;
					mIM2.setImageBitmap(mIM2Bitmap);
					mPhotoFillArray.add(Integer.valueOf(2));
					Collections.sort(mPhotoFillArray, mImageSort);
				}
			}
		});
		mIM3Delete.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mIM3Bitmap!=null && !mIM3Bitmap.isRecycled()){
					mIM3Bitmap.recycle();
					mIM3Bitmap = null;
					mIM3.setImageBitmap(mIM3Bitmap);
					mPhotoFillArray.add(Integer.valueOf(3));
					Collections.sort(mPhotoFillArray, mImageSort);
				}
			}
		});
		mIM4Delete.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				if(mIM4Bitmap!=null && !mIM4Bitmap.isRecycled()){
					mIM4Bitmap.recycle();
					mIM4Bitmap = null;
					mIM4.setImageBitmap(mIM4Bitmap);
					mPhotoFillArray.add(Integer.valueOf(4));
					Collections.sort(mPhotoFillArray, mImageSort);
				}
			}
		});
	}
	
	private void HandlePhoto(Bitmap bmp){
		if(bmp==null){
			Toast.makeText(getActivity(), "获取图片失败,请重新尝试，或者稍后拍照", Toast.LENGTH_SHORT).show();
			return;
		}
		
		if(mPhotoFillArray.size()==0){
			Toast.makeText(getActivity(), "请先删除一张图片,在更新", Toast.LENGTH_SHORT).show();
			return;
		}
		
		int fillorder = mPhotoFillArray.get(0).intValue();
		/*
		 * 图片作本地缓存处理需要 sd card > private
		 */
		switch(fillorder){
    	case 1:
    	{
    		mIM1Bitmap = bitMap;
    		mIM1.setImageBitmap(mIM1Bitmap);
    		mPhotoFillArray.remove(0);
    		break;
    	}
    	case 2:
    	{
    		mIM2Bitmap = bitMap;
    		mIM2.setImageBitmap(mIM2Bitmap);
    		mPhotoFillArray.remove(0);
    		break;
    	}
    	case 3:
    	{
    		mIM3Bitmap = bitMap;
    		mIM3.setImageBitmap(mIM3Bitmap);
    		mPhotoFillArray.remove(0);
    		break;
    	}
    	case 4:
    	{
    		mIM4Bitmap = bitMap;
    		mIM4.setImageBitmap(mIM4Bitmap);
    		mPhotoFillArray.remove(0);
    		break;
    	}
        default:
        	break;
    	}
	}
	
	/*
	<!----------------------------------------------------------------------------------->
	 * 调用系统相机
	 */
	private void takePhoto() {
        try {
            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            startActivityForResult(intent, IMAGE_CAPTURE);
        } catch (Exception e) {
           // CSLog.e(UserPicView.class, e.getMessage());
        }
    }
	
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
	    switch (requestCode) {
        case IMAGE_CAPTURE:
            if (resultCode == Activity.RESULT_OK) {
                imageFrom = requestCode;
                scaleImage(data);
            }
            break;
        case IMAGE_LOCAL:
            if (resultCode == Activity.RESULT_OK) {
                imageFrom = requestCode;
                imageUrl = data.getData();
                scaleImage(data);
            }
            break;
        case IMAGE_SCALE:
            if (data != null && data.getParcelableExtra(BITMAP_PROP_NAME) != null) {
                bitMap = (Bitmap) data.getParcelableExtra(BITMAP_PROP_NAME);
                if (bitMap != null) {
                	HandlePhoto(bitMap);
//                	returnLastView(bitMap);
                    /*if (getContext() instanceof ActivityController) {
                        ((ActivityController) getContext()).showWait("正在修改头像,请稍后...");
                    } else {
                        PKGameInterface.getInstance(getContext()).showWait("正在修改头像,请稍后...");
                    }
                    bitMap = Tool.getBitmap(bitMap, fPicWidth, fPicWidth, fPicSize);
                    setUploadUserPicAction(bitMap);*/
                }
            }
            break;
        default:
            break;
	    }
	}

	/**
     * 调用系统相册中的剪裁图片方法
     * 
     * @param data 调用系统相机和图片选取返回的信息
     */
    private void scaleImage(Intent data) {
        Intent intent = new Intent("com.android.camera.action.CROP");
        if (imageFrom == IMAGE_CAPTURE ) {
            intent.setType("image/*");
            intent.putExtra("data", data.getParcelableExtra(BITMAP_PROP_NAME));
        } else {
            intent.setDataAndType(imageUrl, "image/*");
        }
        intent.putExtra("crop", "true");
        intent.putExtra("aspectX", 1);
        intent.putExtra("aspectY", 1);
        intent.putExtra("outputX", fPicWidth);
        intent.putExtra("outputY", fPicWidth);
        intent.putExtra("return-data", true);

        startActivityForResult(intent, IMAGE_SCALE);
    }
    
//    private class PhotoImageAdapter extends BaseAdapter{
//
//    	private List<Bitmap> bitmaps;
//    	
//    	PhotoImageAdapter(List<Bitmap> bitmaps){
//    		this.bitmaps = bitmaps;
//    	}
//    	
//		@Override
//		public int getCount() {
//			// TODO Auto-generated method stub
//			return bitmaps==null?0:bitmaps.size();
//		}
//
//		@Override
//		public Object getItem(int arg0) {
//			// TODO Auto-generated method stub
//			return bitmaps==null?null:bitmaps.get(arg0);
//		}
//
//		@Override
//		public long getItemId(int arg0) {
//			// TODO Auto-generated method stub
//			return arg0;
//		}
//
//		@Override
//		public View getView(int arg0, View arg1, ViewGroup arg2) {
//			// TODO Auto-generated method stub
//			return null;
//		}
//    	
//    }

    
    class ImageSort implements Comparator<Integer>{

		@Override
		public int compare(Integer arg0, Integer arg1) {
			// TODO Auto-generated method stub
			return arg0.intValue()-arg1.intValue();
		}
    	
    }
}